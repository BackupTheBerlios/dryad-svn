AC_INIT([dryad], [M2], [dryad-bugs@rtlad.org])

# check if we should use the paranoid shutdown code
AC_ARG_ENABLE([paranoid-shutdown],
	[AC_HELP_STRING([--enable-paranoid-shutdown], [force the signal handler to wait for the analysis core to exit before quiting.])],
	[case "${enableval}" in
		yes) AC_DEFINE([PARANOID_SHUTDOWN], [1], [Use paranoid shutdown]) paranoid=true
		;;
		no) paranoid=false
		;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-paranoid-shutdown) ;;
	esac])
	
# check which plugins we should build. By default, we build all that don't have external dependencies
AC_ARG_ENABLE([emailplug], [AC_HELP_STRING([--enable-emailplug], [build the libemail.so libhandler])],
	[case "${enableval}" in
		yes) emailplug=true; PKGLIBS=$PKGLIBS'libemail.la '
		;;
		no) emailplug=false
		;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-emailplug) ;;
	esac], [emailplug=false])

AC_ARG_ENABLE([nullplug], [AC_HELP_STRING([--disable-nullplug], [don't build the libnull.so libhandler])],
	[case "${disableval}" in
		yes) nullplug=false
		;;
		no) nullplug=true; PKGLIBS=$PKGLIBS'libnull.la '
		;;
		*) AC_MSG_ERROR(bad value ${disableval} for --disable-nullplug) ;;
	esac], [nullplug=true; PKGLIBS=$PKGLIBS'libnull.la '])

AC_ARG_ENABLE([fileplug], [AC_HELP_STRING([--disable-fileplug], [don't build the libfile.so libhandler])],
	[case "{$disableval}" in
		yes) fileplug=false
		;;
		no) fileplug=true; PKGLIBS=$PKGLIBS+'libfile.la '
		;;
		*) AC_MSG_ERROR(bad value ${disableval} for --disable-fileplug) ;;
	esac], [fileplug=true; PKGLIBS=$PKGLIBS'libfile.la '])

AC_ARG_ENABLE([externalplug], [AC_HELP_STRING([--disable-externalplug], [don't build the libexternal.so libhandler])],
	[case "{$disableval}" in
		yes) externalplug=false
		;;
		no) externalplug=true; PKGLIBS=$PKGLIBS+'libexternal.la '
		;;
		*) AC_MSG_ERROR(bad value ${disableval} for --disable-externalplug) ;;
	esac], [externalplug=true;PKGLIBS=$PKGLIBS'libexternal.la '])

AC_ARG_ENABLE([pythonplug], [AC_HELP_STRING([--enable-pythonplug], [build the libpython.so libhandler])],
	[pythonplug=true; pythonincl=${enableval}; PKGLIBS=$PKGLIBS'libpython.la '], [pythonplug=false])

AM_CONDITIONAL(EMAILPLUG, test x$emailplug = xtrue)
AM_CONDITIONAL(NULLPLUG, test x$nullplug = xtrue)
AM_CONDITIONAL(FILEPLUG, test x$fileplug = xtrue)
AM_CONDITIONAL(EXTERNALPLUG, test x$externalplug = xtrue)
AM_CONDITIONAL(PYTHONPLUG, test x$pythonplug = xtrue)

AC_SUBST([PKGLIBS])

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AC_LANG_CPLUSPLUS
AC_PROG_CXX
AM_PROG_LIBTOOL
AC_PROG_RANLIB
AC_C_CONST

AC_FUNC_MALLOC
AC_FUNC_STAT
AC_HEADER_STDBOOL

AC_CHECK_FUNCS([memset])
AC_CHECK_FUNCS([socket])
AC_CHECK_HEADERS([arpa/inet.h])
AC_CHECK_HEADERS([netdb.h])
AC_CHECK_HEADERS([netinet/in.h])
AC_CHECK_HEADERS([sys/socket.h])


AC_MSG_CHECKING([if $CXX accepts -fstack-protector])
oldcflags=$CXXFLAGS
CXXFLAGS="$CXXFLAGS -fstack-protector"
worked=no
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <stdio.h>],[fprintf(stderr, "Hello, World!\n")])],[worked=[yes]],[CXXFLAGS=$oldcflags])
AC_MSG_RESULT([$worked])

AC_CHECK_LIB([pcre], [pcre_exec],, [AC_MSG_FAILURE([Dryad requires libpcre!])])
AC_CHECK_LIB([pthread], [pthread_mutex_lock],, [AC_MSG_FAILURE([Dryad requires pthreads!])])
AC_CHECK_LIB([ltdl], [lt_dlopen],, [AC_MSG_FAILURE([Dryad requires Libtool's libtld!])])
if [ "$emailplug" = "true" ]; then
AC_CHECK_LIB([esmtp], [smtp_errno],, [AC_MSG_FAILURE([The libemail libhandler requires libesmtp!])])
fi
AC_CHECK_LIB([lrsp], [lrsp_client_free],, [AC_MSG_FAILURE([Dryad requires liblrsp!])])
if [ "$pythonplug" = "true" ]; then
LDFLAGS="$LDFLAGS `python-config`"
fi

if [ "$pythonplug" = "true" ]; then
CPPFLAGS="$CPPFLAGS -I$pythonincl"
AC_CHECK_HEADER([Python.h],, [AC_MSG_FAILURE([The libpython libhandler requires that you specify the path to your python includes. Generally, these are in PYTHON_PREFIX/include/pythonVER/. Dryad has been confirmed to work with both version 2.2 and 2.3.])])
fi

AC_OUTPUT(Makefile src/Makefile src/plugins/Makefile databases/Makefile docs/Makefile)

echo
echo "Summary:"
echo "Building the following libhandlers:"
if [[ "$emailplug" = "true" ]]; then
	echo "  libemail.so"
fi
if [[ "$nullplug" = "true" ]]; then
	echo "  libnull.so"
fi
if [[ "$fileplug" = "true" ]]; then
	echo "  libfile.so"
fi
if [[ "$externalplug" = "true" ]]; then
	echo "  libexternal.so"
fi
if [[ "$pythonplug" = "true" ]]; then
	echo "  libpython.so"
fi
echo
echo -n "Paranoid shutdown is "
if [[ "$paranoid" = "true" ]]; then
	echo "on"
else
	echo "off"
fi
echo
echo -n "-fstack-protector is "
if [[ "$worked" = "yes" ]]; then
	echo "enabled"
else
	echo "disabled"
fi
